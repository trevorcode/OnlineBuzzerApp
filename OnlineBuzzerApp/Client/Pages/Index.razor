@page "/"

@using Microsoft.AspNetCore.SignalR.Client

@inject NavigationManager NavigationManager

<div class="buzzerPageBackground" @onkeyup="@(e => HandlePagePress(e))">
    @if (!IsConnected)
    {
        <div class="form-group">
            <label for="userInput">User:</label>
            <input id="userInput" @bind="userInput" />
        </div>
        <div><button @onclick="Connect">Connect</button></div>
    }
    else
    {
        <div class="connectedPageContainer">
            <div class="chatContainer">
                <div class="connectedUsers">
                    @foreach (var user in connectedUsers)
                    {
                        <div>@user<span> | </span></div>
                    }
                </div>

                <div class="messageBox">
                    <div class="messagesBox">
                        <div class="messagesContainer">
                            @foreach (var message in messages)
                            {
                                @if (message.MessageType == MessageType.ChatMessage)
                                {
                                    <div class="chatMessage"><div><b>@message.Name:</b> @message.Message</div><div>@message.DateTime.ToLocalTime().ToShortTimeString()</div></div>
                                }
                                else if (message.MessageType == MessageType.Notification)
                                {
                                    <div class="chatMessage"><div><i>@message.Message</i></div><div>@message.DateTime.ToLocalTime().ToShortTimeString()</div></div>
                                }
                            }
                        </div>
                    </div>
                    <div>
                        <label for="messageInput">Chat:</label>
                        <input id="messageInput" @bind="messageInput" @onkeyup="@(e => HandleChatPress(e))" />
                        <button @onclick="Send" disabled="@(!IsConnected)">Send Message</button>

                    </div>
                </div>
            </div>

            <div class="buzzerContainer">
                <h1>Buzzer</h1>
                <button @onclick="Buzz" class="btn btn-success btn-lg btn3d">Buzz!</button>
                @if (!string.IsNullOrEmpty(buzzedUser))
                {
                    <div>@buzzedUser buzzed in first!</div>
                }
            </div>
        </div>
    }
</div>


@code {
    HubConnection hubConnection;
    List<ChatMessage> messages = new List<ChatMessage>();
    string userInput;
    string messageInput;

    string buzzedUser;

    List<string> connectedUsers = new List<string>();

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/chatHub"))
            .Build();


    }

    private async Task Connect()
    {
        hubConnection.On<ChatMessage>("ReceiveMessage", (chatMessage) =>
        {
            messages.Add(chatMessage);
            if (messages.Count > 40)
            {
                messages.RemoveAt(0);
            }
            StateHasChanged();
        });

        hubConnection.On<string>("ReceiveBuzz", (user) =>
        {
            buzzedUser = user;
            StateHasChanged();
        });

        hubConnection.On<ChatMessage>("ReceiveBuzzClear", (chatMessage) =>
        {
            buzzedUser = string.Empty;

            messages.Add(chatMessage);
            if (messages.Count > 40)
            {
                messages.RemoveAt(0);
            }
            StateHasChanged();
        });

        hubConnection.On<List<string>>("ReceiveAllUsers", (users) =>
        {
            connectedUsers = users;
            StateHasChanged();
        });

        hubConnection.On<List<ChatMessage>>("ReceiveCurrentChatMessages", (serverMessages) =>
        {
            messages = serverMessages;
            StateHasChanged();
        });

        await hubConnection.StartAsync();

        if (IsConnected)
        {
            await hubConnection.SendAsync("ConnectUser", userInput);
        }
    }

    private async Task Send()
    {
        if (!string.IsNullOrEmpty(messageInput))
        {
            await hubConnection.SendAsync("SendMessage", userInput, messageInput);
            messageInput = string.Empty;
        }
    }

    Task Buzz() => hubConnection.SendAsync("Buzz", userInput);

    public bool IsConnected => hubConnection.State == HubConnectionState.Connected;

    private async Task HandleChatPress(KeyboardEventArgs args)
    {
        if (args.Key == "Enter")
        {
            await Send();
        }
    }

    private async Task HandlePagePress(KeyboardEventArgs args)
    {
        if (args.Key == "ArrowDown")
        {
            await hubConnection.SendAsync("Buzz", userInput);
        }
    }
}